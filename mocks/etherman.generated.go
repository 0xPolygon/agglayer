// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	state "github.com/0xPolygonHermez/zkevm-node/state"

	time "time"

	tx "github.com/0xPolygon/agglayer/tx"
)

// EthermanMock is an autogenerated mock type for the IEtherman type
type EthermanMock struct {
	mock.Mock
}

type EthermanMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EthermanMock) EXPECT() *EthermanMock_Expecter {
	return &EthermanMock_Expecter{mock: &_m.Mock}
}

// BuildTrustedVerifyBatchesTxData provides a mock function with given fields: lastVerifiedBatch, newVerifiedBatch, proof, rollupId
func (_m *EthermanMock) BuildTrustedVerifyBatchesTxData(lastVerifiedBatch uint64, newVerifiedBatch uint64, proof tx.ZKP, rollupId uint32) ([]byte, error) {
	ret := _m.Called(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)

	if len(ret) == 0 {
		panic("no return value specified for BuildTrustedVerifyBatchesTxData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, tx.ZKP, uint32) ([]byte, error)); ok {
		return rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, tx.ZKP, uint32) []byte); ok {
		r0 = rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, tx.ZKP, uint32) error); ok {
		r1 = rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_BuildTrustedVerifyBatchesTxData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildTrustedVerifyBatchesTxData'
type EthermanMock_BuildTrustedVerifyBatchesTxData_Call struct {
	*mock.Call
}

// BuildTrustedVerifyBatchesTxData is a helper method to define mock.On call
//   - lastVerifiedBatch uint64
//   - newVerifiedBatch uint64
//   - proof tx.ZKP
//   - rollupId uint32
func (_e *EthermanMock_Expecter) BuildTrustedVerifyBatchesTxData(lastVerifiedBatch interface{}, newVerifiedBatch interface{}, proof interface{}, rollupId interface{}) *EthermanMock_BuildTrustedVerifyBatchesTxData_Call {
	return &EthermanMock_BuildTrustedVerifyBatchesTxData_Call{Call: _e.mock.On("BuildTrustedVerifyBatchesTxData", lastVerifiedBatch, newVerifiedBatch, proof, rollupId)}
}

func (_c *EthermanMock_BuildTrustedVerifyBatchesTxData_Call) Run(run func(lastVerifiedBatch uint64, newVerifiedBatch uint64, proof tx.ZKP, rollupId uint32)) *EthermanMock_BuildTrustedVerifyBatchesTxData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(tx.ZKP), args[3].(uint32))
	})
	return _c
}

func (_c *EthermanMock_BuildTrustedVerifyBatchesTxData_Call) Return(data []byte, err error) *EthermanMock_BuildTrustedVerifyBatchesTxData_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *EthermanMock_BuildTrustedVerifyBatchesTxData_Call) RunAndReturn(run func(uint64, uint64, tx.ZKP, uint32) ([]byte, error)) *EthermanMock_BuildTrustedVerifyBatchesTxData_Call {
	_c.Call.Return(run)
	return _c
}

// CallContract provides a mock function with given fields: ctx, call, blockNumber
func (_m *EthermanMock) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, call, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)); ok {
		return rf(ctx, call, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) []byte); ok {
		r0 = rf(ctx, call, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg, *big.Int) error); ok {
		r1 = rf(ctx, call, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_CallContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContract'
type EthermanMock_CallContract_Call struct {
	*mock.Call
}

// CallContract is a helper method to define mock.On call
//   - ctx context.Context
//   - call ethereum.CallMsg
//   - blockNumber *big.Int
func (_e *EthermanMock_Expecter) CallContract(ctx interface{}, call interface{}, blockNumber interface{}) *EthermanMock_CallContract_Call {
	return &EthermanMock_CallContract_Call{Call: _e.mock.On("CallContract", ctx, call, blockNumber)}
}

func (_c *EthermanMock_CallContract_Call) Run(run func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int)) *EthermanMock_CallContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ethereum.CallMsg), args[2].(*big.Int))
	})
	return _c
}

func (_c *EthermanMock_CallContract_Call) Return(_a0 []byte, _a1 error) *EthermanMock_CallContract_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_CallContract_Call) RunAndReturn(run func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)) *EthermanMock_CallContract_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTxWasMined provides a mock function with given fields: ctx, txHash
func (_m *EthermanMock) CheckTxWasMined(ctx context.Context, txHash common.Hash) (bool, *coretypes.Receipt, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for CheckTxWasMined")
	}

	var r0 bool
	var r1 *coretypes.Receipt
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (bool, *coretypes.Receipt, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) bool); ok {
		r0 = rf(ctx, txHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) *coretypes.Receipt); ok {
		r1 = rf(ctx, txHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*coretypes.Receipt)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, common.Hash) error); ok {
		r2 = rf(ctx, txHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EthermanMock_CheckTxWasMined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTxWasMined'
type EthermanMock_CheckTxWasMined_Call struct {
	*mock.Call
}

// CheckTxWasMined is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash common.Hash
func (_e *EthermanMock_Expecter) CheckTxWasMined(ctx interface{}, txHash interface{}) *EthermanMock_CheckTxWasMined_Call {
	return &EthermanMock_CheckTxWasMined_Call{Call: _e.mock.On("CheckTxWasMined", ctx, txHash)}
}

func (_c *EthermanMock_CheckTxWasMined_Call) Run(run func(ctx context.Context, txHash common.Hash)) *EthermanMock_CheckTxWasMined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *EthermanMock_CheckTxWasMined_Call) Return(_a0 bool, _a1 *coretypes.Receipt, _a2 error) *EthermanMock_CheckTxWasMined_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EthermanMock_CheckTxWasMined_Call) RunAndReturn(run func(context.Context, common.Hash) (bool, *coretypes.Receipt, error)) *EthermanMock_CheckTxWasMined_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateGas provides a mock function with given fields: ctx, from, to, value, data
func (_m *EthermanMock) EstimateGas(ctx context.Context, from common.Address, to *common.Address, value *big.Int, data []byte) (uint64, error) {
	ret := _m.Called(ctx, from, to, value, data)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *common.Address, *big.Int, []byte) (uint64, error)); ok {
		return rf(ctx, from, to, value, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *common.Address, *big.Int, []byte) uint64); ok {
		r0 = rf(ctx, from, to, value, data)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, *common.Address, *big.Int, []byte) error); ok {
		r1 = rf(ctx, from, to, value, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type EthermanMock_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
//   - ctx context.Context
//   - from common.Address
//   - to *common.Address
//   - value *big.Int
//   - data []byte
func (_e *EthermanMock_Expecter) EstimateGas(ctx interface{}, from interface{}, to interface{}, value interface{}, data interface{}) *EthermanMock_EstimateGas_Call {
	return &EthermanMock_EstimateGas_Call{Call: _e.mock.On("EstimateGas", ctx, from, to, value, data)}
}

func (_c *EthermanMock_EstimateGas_Call) Run(run func(ctx context.Context, from common.Address, to *common.Address, value *big.Int, data []byte)) *EthermanMock_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address), args[2].(*common.Address), args[3].(*big.Int), args[4].([]byte))
	})
	return _c
}

func (_c *EthermanMock_EstimateGas_Call) Return(_a0 uint64, _a1 error) *EthermanMock_EstimateGas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_EstimateGas_Call) RunAndReturn(run func(context.Context, common.Address, *common.Address, *big.Int, []byte) (uint64, error)) *EthermanMock_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastBlock provides a mock function with given fields: ctx, dbTx
func (_m *EthermanMock) GetLastBlock(ctx context.Context, dbTx pgx.Tx) (*state.Block, error) {
	ret := _m.Called(ctx, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastBlock")
	}

	var r0 *state.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) (*state.Block, error)); ok {
		return rf(ctx, dbTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) *state.Block); ok {
		r0 = rf(ctx, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx) error); ok {
		r1 = rf(ctx, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_GetLastBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastBlock'
type EthermanMock_GetLastBlock_Call struct {
	*mock.Call
}

// GetLastBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTx pgx.Tx
func (_e *EthermanMock_Expecter) GetLastBlock(ctx interface{}, dbTx interface{}) *EthermanMock_GetLastBlock_Call {
	return &EthermanMock_GetLastBlock_Call{Call: _e.mock.On("GetLastBlock", ctx, dbTx)}
}

func (_c *EthermanMock_GetLastBlock_Call) Run(run func(ctx context.Context, dbTx pgx.Tx)) *EthermanMock_GetLastBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx))
	})
	return _c
}

func (_c *EthermanMock_GetLastBlock_Call) Return(_a0 *state.Block, _a1 error) *EthermanMock_GetLastBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_GetLastBlock_Call) RunAndReturn(run func(context.Context, pgx.Tx) (*state.Block, error)) *EthermanMock_GetLastBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetRevertMessage provides a mock function with given fields: ctx, _a1
func (_m *EthermanMock) GetRevertMessage(ctx context.Context, _a1 *coretypes.Transaction) (string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRevertMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coretypes.Transaction) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_GetRevertMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRevertMessage'
type EthermanMock_GetRevertMessage_Call struct {
	*mock.Call
}

// GetRevertMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *coretypes.Transaction
func (_e *EthermanMock_Expecter) GetRevertMessage(ctx interface{}, _a1 interface{}) *EthermanMock_GetRevertMessage_Call {
	return &EthermanMock_GetRevertMessage_Call{Call: _e.mock.On("GetRevertMessage", ctx, _a1)}
}

func (_c *EthermanMock_GetRevertMessage_Call) Run(run func(ctx context.Context, _a1 *coretypes.Transaction)) *EthermanMock_GetRevertMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.Transaction))
	})
	return _c
}

func (_c *EthermanMock_GetRevertMessage_Call) Return(_a0 string, _a1 error) *EthermanMock_GetRevertMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_GetRevertMessage_Call) RunAndReturn(run func(context.Context, *coretypes.Transaction) (string, error)) *EthermanMock_GetRevertMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetSequencerAddr provides a mock function with given fields: rollupId
func (_m *EthermanMock) GetSequencerAddr(rollupId uint32) (common.Address, error) {
	ret := _m.Called(rollupId)

	if len(ret) == 0 {
		panic("no return value specified for GetSequencerAddr")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (common.Address, error)); ok {
		return rf(rollupId)
	}
	if rf, ok := ret.Get(0).(func(uint32) common.Address); ok {
		r0 = rf(rollupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(rollupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_GetSequencerAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequencerAddr'
type EthermanMock_GetSequencerAddr_Call struct {
	*mock.Call
}

// GetSequencerAddr is a helper method to define mock.On call
//   - rollupId uint32
func (_e *EthermanMock_Expecter) GetSequencerAddr(rollupId interface{}) *EthermanMock_GetSequencerAddr_Call {
	return &EthermanMock_GetSequencerAddr_Call{Call: _e.mock.On("GetSequencerAddr", rollupId)}
}

func (_c *EthermanMock_GetSequencerAddr_Call) Run(run func(rollupId uint32)) *EthermanMock_GetSequencerAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *EthermanMock_GetSequencerAddr_Call) Return(_a0 common.Address, _a1 error) *EthermanMock_GetSequencerAddr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_GetSequencerAddr_Call) RunAndReturn(run func(uint32) (common.Address, error)) *EthermanMock_GetSequencerAddr_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with given fields: ctx, txHash
func (_m *EthermanMock) GetTx(ctx context.Context, txHash common.Hash) (*coretypes.Transaction, bool, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *coretypes.Transaction
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*coretypes.Transaction, bool, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *coretypes.Transaction); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) bool); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, common.Hash) error); ok {
		r2 = rf(ctx, txHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EthermanMock_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type EthermanMock_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash common.Hash
func (_e *EthermanMock_Expecter) GetTx(ctx interface{}, txHash interface{}) *EthermanMock_GetTx_Call {
	return &EthermanMock_GetTx_Call{Call: _e.mock.On("GetTx", ctx, txHash)}
}

func (_c *EthermanMock_GetTx_Call) Run(run func(ctx context.Context, txHash common.Hash)) *EthermanMock_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *EthermanMock_GetTx_Call) Return(_a0 *coretypes.Transaction, _a1 bool, _a2 error) *EthermanMock_GetTx_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *EthermanMock_GetTx_Call) RunAndReturn(run func(context.Context, common.Hash) (*coretypes.Transaction, bool, error)) *EthermanMock_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxReceipt provides a mock function with given fields: ctx, txHash
func (_m *EthermanMock) GetTxReceipt(ctx context.Context, txHash common.Hash) (*coretypes.Receipt, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTxReceipt")
	}

	var r0 *coretypes.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*coretypes.Receipt, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *coretypes.Receipt); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_GetTxReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxReceipt'
type EthermanMock_GetTxReceipt_Call struct {
	*mock.Call
}

// GetTxReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash common.Hash
func (_e *EthermanMock_Expecter) GetTxReceipt(ctx interface{}, txHash interface{}) *EthermanMock_GetTxReceipt_Call {
	return &EthermanMock_GetTxReceipt_Call{Call: _e.mock.On("GetTxReceipt", ctx, txHash)}
}

func (_c *EthermanMock_GetTxReceipt_Call) Run(run func(ctx context.Context, txHash common.Hash)) *EthermanMock_GetTxReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *EthermanMock_GetTxReceipt_Call) Return(_a0 *coretypes.Receipt, _a1 error) *EthermanMock_GetTxReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_GetTxReceipt_Call) RunAndReturn(run func(context.Context, common.Hash) (*coretypes.Receipt, error)) *EthermanMock_GetTxReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// PendingNonce provides a mock function with given fields: ctx, account
func (_m *EthermanMock) PendingNonce(ctx context.Context, account common.Address) (uint64, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for PendingNonce")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) (uint64, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) uint64); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_PendingNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingNonce'
type EthermanMock_PendingNonce_Call struct {
	*mock.Call
}

// PendingNonce is a helper method to define mock.On call
//   - ctx context.Context
//   - account common.Address
func (_e *EthermanMock_Expecter) PendingNonce(ctx interface{}, account interface{}) *EthermanMock_PendingNonce_Call {
	return &EthermanMock_PendingNonce_Call{Call: _e.mock.On("PendingNonce", ctx, account)}
}

func (_c *EthermanMock_PendingNonce_Call) Run(run func(ctx context.Context, account common.Address)) *EthermanMock_PendingNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address))
	})
	return _c
}

func (_c *EthermanMock_PendingNonce_Call) Return(_a0 uint64, _a1 error) *EthermanMock_PendingNonce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_PendingNonce_Call) RunAndReturn(run func(context.Context, common.Address) (uint64, error)) *EthermanMock_PendingNonce_Call {
	_c.Call.Return(run)
	return _c
}

// SendTx provides a mock function with given fields: ctx, _a1
func (_m *EthermanMock) SendTx(ctx context.Context, _a1 *coretypes.Transaction) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EthermanMock_SendTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTx'
type EthermanMock_SendTx_Call struct {
	*mock.Call
}

// SendTx is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *coretypes.Transaction
func (_e *EthermanMock_Expecter) SendTx(ctx interface{}, _a1 interface{}) *EthermanMock_SendTx_Call {
	return &EthermanMock_SendTx_Call{Call: _e.mock.On("SendTx", ctx, _a1)}
}

func (_c *EthermanMock_SendTx_Call) Run(run func(ctx context.Context, _a1 *coretypes.Transaction)) *EthermanMock_SendTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.Transaction))
	})
	return _c
}

func (_c *EthermanMock_SendTx_Call) Return(_a0 error) *EthermanMock_SendTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthermanMock_SendTx_Call) RunAndReturn(run func(context.Context, *coretypes.Transaction) error) *EthermanMock_SendTx_Call {
	_c.Call.Return(run)
	return _c
}

// SignTx provides a mock function with given fields: ctx, sender, _a2
func (_m *EthermanMock) SignTx(ctx context.Context, sender common.Address, _a2 *coretypes.Transaction) (*coretypes.Transaction, error) {
	ret := _m.Called(ctx, sender, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SignTx")
	}

	var r0 *coretypes.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *coretypes.Transaction) (*coretypes.Transaction, error)); ok {
		return rf(ctx, sender, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *coretypes.Transaction) *coretypes.Transaction); ok {
		r0 = rf(ctx, sender, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, *coretypes.Transaction) error); ok {
		r1 = rf(ctx, sender, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_SignTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignTx'
type EthermanMock_SignTx_Call struct {
	*mock.Call
}

// SignTx is a helper method to define mock.On call
//   - ctx context.Context
//   - sender common.Address
//   - _a2 *coretypes.Transaction
func (_e *EthermanMock_Expecter) SignTx(ctx interface{}, sender interface{}, _a2 interface{}) *EthermanMock_SignTx_Call {
	return &EthermanMock_SignTx_Call{Call: _e.mock.On("SignTx", ctx, sender, _a2)}
}

func (_c *EthermanMock_SignTx_Call) Run(run func(ctx context.Context, sender common.Address, _a2 *coretypes.Transaction)) *EthermanMock_SignTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address), args[2].(*coretypes.Transaction))
	})
	return _c
}

func (_c *EthermanMock_SignTx_Call) Return(_a0 *coretypes.Transaction, _a1 error) *EthermanMock_SignTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_SignTx_Call) RunAndReturn(run func(context.Context, common.Address, *coretypes.Transaction) (*coretypes.Transaction, error)) *EthermanMock_SignTx_Call {
	_c.Call.Return(run)
	return _c
}

// SuggestedGasPrice provides a mock function with given fields: ctx
func (_m *EthermanMock) SuggestedGasPrice(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuggestedGasPrice")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_SuggestedGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuggestedGasPrice'
type EthermanMock_SuggestedGasPrice_Call struct {
	*mock.Call
}

// SuggestedGasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *EthermanMock_Expecter) SuggestedGasPrice(ctx interface{}) *EthermanMock_SuggestedGasPrice_Call {
	return &EthermanMock_SuggestedGasPrice_Call{Call: _e.mock.On("SuggestedGasPrice", ctx)}
}

func (_c *EthermanMock_SuggestedGasPrice_Call) Run(run func(ctx context.Context)) *EthermanMock_SuggestedGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *EthermanMock_SuggestedGasPrice_Call) Return(_a0 *big.Int, _a1 error) *EthermanMock_SuggestedGasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_SuggestedGasPrice_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *EthermanMock_SuggestedGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// WaitTxToBeMined provides a mock function with given fields: ctx, _a1, timeout
func (_m *EthermanMock) WaitTxToBeMined(ctx context.Context, _a1 *coretypes.Transaction, timeout time.Duration) (bool, error) {
	ret := _m.Called(ctx, _a1, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitTxToBeMined")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction, time.Duration) (bool, error)); ok {
		return rf(ctx, _a1, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coretypes.Transaction, time.Duration) bool); ok {
		r0 = rf(ctx, _a1, timeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coretypes.Transaction, time.Duration) error); ok {
		r1 = rf(ctx, _a1, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthermanMock_WaitTxToBeMined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitTxToBeMined'
type EthermanMock_WaitTxToBeMined_Call struct {
	*mock.Call
}

// WaitTxToBeMined is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *coretypes.Transaction
//   - timeout time.Duration
func (_e *EthermanMock_Expecter) WaitTxToBeMined(ctx interface{}, _a1 interface{}, timeout interface{}) *EthermanMock_WaitTxToBeMined_Call {
	return &EthermanMock_WaitTxToBeMined_Call{Call: _e.mock.On("WaitTxToBeMined", ctx, _a1, timeout)}
}

func (_c *EthermanMock_WaitTxToBeMined_Call) Run(run func(ctx context.Context, _a1 *coretypes.Transaction, timeout time.Duration)) *EthermanMock_WaitTxToBeMined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*coretypes.Transaction), args[2].(time.Duration))
	})
	return _c
}

func (_c *EthermanMock_WaitTxToBeMined_Call) Return(_a0 bool, _a1 error) *EthermanMock_WaitTxToBeMined_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthermanMock_WaitTxToBeMined_Call) RunAndReturn(run func(context.Context, *coretypes.Transaction, time.Duration) (bool, error)) *EthermanMock_WaitTxToBeMined_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthermanMock creates a new instance of EthermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthermanMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthermanMock {
	mock := &EthermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
