// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	tx "github.com/0xPolygon/beethoven/tx"
)

// EthermanMock is an autogenerated mock type for the IEtherman type
type EthermanMock struct {
	mock.Mock
}

// BuildTrustedVerifyBatchesTxData provides a mock function with given fields: lastVerifiedBatch, newVerifiedBatch, proof, rollupId
func (_m *EthermanMock) BuildTrustedVerifyBatchesTxData(lastVerifiedBatch uint64, newVerifiedBatch uint64, proof tx.ZKP, rollupId uint32) ([]byte, error) {
	ret := _m.Called(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)

	if len(ret) == 0 {
		panic("no return value specified for BuildTrustedVerifyBatchesTxData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, tx.ZKP, uint32) ([]byte, error)); ok {
		return rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, tx.ZKP, uint32) []byte); ok {
		r0 = rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, tx.ZKP, uint32) error); ok {
		r1 = rf(lastVerifiedBatch, newVerifiedBatch, proof, rollupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallContract provides a mock function with given fields: ctx, call, blockNumber
func (_m *EthermanMock) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, call, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)); ok {
		return rf(ctx, call, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) []byte); ok {
		r0 = rf(ctx, call, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg, *big.Int) error); ok {
		r1 = rf(ctx, call, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSequencerAddr provides a mock function with given fields: rollupId
func (_m *EthermanMock) GetSequencerAddr(rollupId uint32) (common.Address, error) {
	ret := _m.Called(rollupId)

	if len(ret) == 0 {
		panic("no return value specified for GetSequencerAddr")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (common.Address, error)); ok {
		return rf(rollupId)
	}
	if rf, ok := ret.Get(0).(func(uint32) common.Address); ok {
		r0 = rf(rollupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(rollupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEthermanMock creates a new instance of EthermanMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthermanMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthermanMock {
	mock := &EthermanMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
